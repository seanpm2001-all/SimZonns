//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.01 at 10:04:03 PM CEST 
//


package org.opentelecoms.gsm0348.api.model;

import java.util.Objects;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CommandSPI complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CommandSPI"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;all&gt;
 *         &lt;element name="CertificationMode" type="{org.opentelecoms.gsm0348}CertificationMode"/&gt;
 *         &lt;element name="SynchroCounterMode" type="{org.opentelecoms.gsm0348}SynchroCounterMode"/&gt;
 *         &lt;element name="Ciphered" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *       &lt;/all&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CommandSPI", propOrder = {

})
public class CommandSPI {

    @XmlElement(name = "CertificationMode", required = true)
    @XmlSchemaType(name = "string")
    protected CertificationMode certificationMode;
    @XmlElement(name = "SynchroCounterMode", required = true)
    @XmlSchemaType(name = "string")
    protected SynchroCounterMode synchroCounterMode;
    @XmlElement(name = "Ciphered")
    protected boolean ciphered;

    /**
     * Gets the value of the certificationMode property.
     * 
     * @return
     *     possible object is
     *     {@link CertificationMode }
     *     
     */
    public CertificationMode getCertificationMode() {
        return certificationMode;
    }

    /**
     * Sets the value of the certificationMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link CertificationMode }
     *     
     */
    public void setCertificationMode(CertificationMode value) {
        this.certificationMode = value;
    }

    /**
     * Gets the value of the synchroCounterMode property.
     * 
     * @return
     *     possible object is
     *     {@link SynchroCounterMode }
     *     
     */
    public SynchroCounterMode getSynchroCounterMode() {
        return synchroCounterMode;
    }

    /**
     * Sets the value of the synchroCounterMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link SynchroCounterMode }
     *     
     */
    public void setSynchroCounterMode(SynchroCounterMode value) {
        this.synchroCounterMode = value;
    }

    /**
     * Gets the value of the ciphered property.
     * 
     */
    public boolean isCiphered() {
        return ciphered;
    }

    /**
     * Sets the value of the ciphered property.
     * 
     */
    public void setCiphered(boolean value) {
        this.ciphered = value;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CommandSPI)) {
            return false;
        }
        final CommandSPI that = (CommandSPI) o;
        return ciphered == that.ciphered &&
            certificationMode == that.certificationMode &&
            synchroCounterMode == that.synchroCounterMode;
    }

    @Override
    public int hashCode() {
        return Objects.hash(certificationMode, synchroCounterMode, ciphered);
    }

    @Override
    public String toString()
    {
        StringBuilder builder = new StringBuilder();
        builder.append("CommandSPI [certificationMode=");
        builder.append(certificationMode);
        builder.append(", synchroCounterMode=");
        builder.append(synchroCounterMode);
        builder.append(", ciphered=");
        builder.append(ciphered);
        builder.append("]");
        return builder.toString();
    }
}
