//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.01 at 10:04:03 PM CEST 
//


package org.opentelecoms.gsm0348.api.model;

import java.util.Objects;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.opentelecoms.gsm0348.api.Util;


/**
 * <p>Java class for CommandPacketHeader complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CommandPacketHeader"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{org.opentelecoms.gsm0348}SecurityHeader"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SPI" type="{org.opentelecoms.gsm0348}SPI"/&gt;
 *         &lt;element name="KIC" type="{org.opentelecoms.gsm0348}KIC"/&gt;
 *         &lt;element name="KID" type="{org.opentelecoms.gsm0348}KID"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CommandPacketHeader", propOrder = {
    "spi",
    "kic",
    "kid"
})
public class CommandPacketHeader
    extends SecurityHeader
{

    @XmlElement(name = "SPI", required = true)
    protected SPI spi;
    @XmlElement(name = "KIC", required = true)
    protected KIC kic;
    @XmlElement(name = "KID", required = true)
    protected KID kid;

    /**
     * Gets the value of the spi property.
     * 
     * @return
     *     possible object is
     *     {@link SPI }
     *     
     */
    public SPI getSPI() {
        return spi;
    }

    /**
     * Sets the value of the spi property.
     * 
     * @param value
     *     allowed object is
     *     {@link SPI }
     *     
     */
    public void setSPI(SPI value) {
        this.spi = value;
    }

    /**
     * Gets the value of the kic property.
     * 
     * @return
     *     possible object is
     *     {@link KIC }
     *     
     */
    public KIC getKIC() {
        return kic;
    }

    /**
     * Sets the value of the kic property.
     * 
     * @param value
     *     allowed object is
     *     {@link KIC }
     *     
     */
    public void setKIC(KIC value) {
        this.kic = value;
    }

    /**
     * Gets the value of the kid property.
     * 
     * @return
     *     possible object is
     *     {@link KID }
     *     
     */
    public KID getKID() {
        return kid;
    }

    /**
     * Sets the value of the kid property.
     * 
     * @param value
     *     allowed object is
     *     {@link KID }
     *     
     */
    public void setKID(KID value) {
        this.kid = value;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CommandPacketHeader)) {
            return false;
        }
        final CommandPacketHeader that = (CommandPacketHeader) o;
        return Objects.equals(spi, that.spi) &&
            Objects.equals(kic, that.kic) &&
            Objects.equals(kid, that.kid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(spi, kic, kid);
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("CommandPacketHeader [spi=");
        builder.append(spi);
        builder.append(", kic=");
        builder.append(kic);
        builder.append(", kid=");
        builder.append(kid);
        builder.append(", tar=");
        builder.append(Util.toHexString(tar));
        builder.append(", paddingCounter=");
        builder.append(paddingCounter);
        builder.append(", security=");
        builder.append(Util.toHexString(security));
        builder.append(", counter=");
        builder.append(Util.toHexString(counter));
        builder.append("]");
        return builder.toString();
    }

}
