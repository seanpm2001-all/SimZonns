//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.01 at 10:04:03 PM CEST 
//


package org.opentelecoms.gsm0348.api.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CertificationAlgorithmMode.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CertificationAlgorithmMode"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="CRC_16"/&gt;
 *     &lt;enumeration value="CRC_32"/&gt;
 *     &lt;enumeration value="DES_CBC"/&gt;
 *     &lt;enumeration value="TRIPLE_DES_CBC_2_KEYS"/&gt;
 *     &lt;enumeration value="TRIPLE_DES_CBC_3_KEYS"/&gt;
 *     &lt;enumeration value="RESERVED"/&gt;
 *     &lt;enumeration value="AES_CMAC"/&gt;
 *     &lt;enumeration value="XOR4"/&gt;
 *     &lt;enumeration value="XOR8"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "CertificationAlgorithmMode")
@XmlEnum
public enum CertificationAlgorithmMode {

    CRC_16("CRC_16"),
    CRC_32("CRC_32"),
    DES_CBC("DES_CBC"),
    TRIPLE_DES_CBC_2_KEYS("TRIPLE_DES_CBC_2_KEYS"),
    TRIPLE_DES_CBC_3_KEYS("TRIPLE_DES_CBC_3_KEYS"),
    RESERVED("RESERVED"),
    AES_CMAC("AES_CMAC"),
    @XmlEnumValue("XOR4")
    XOR_4("XOR4"),
    @XmlEnumValue("XOR8")
    XOR_8("XOR8");
    private final String value;

    CertificationAlgorithmMode(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CertificationAlgorithmMode fromValue(String v) {
        for (CertificationAlgorithmMode c: CertificationAlgorithmMode.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
